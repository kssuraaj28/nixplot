#!/usr/bin/env python3
import multiprocessing

XWIN_SIZE=1
YWIN_SIZE=1
BUFFER_SIZE=3000



def plot(mpq):
    import matplotlib.pyplot as plt 
    import matplotlib.animation as animation 
    plt.style.use('dark_background')

    fig = plt.figure() 


    ax = plt.axes()

    x,y = mpq.get()
    xdata = [x]
    ydata = [y]
    line, = ax.plot(xdata, ydata, lw=2) 

    def animate(_): 
        i=0
        while not mpq.empty():
            if i>BUFFER_SIZE: #Just read BUFFER_SIZE at max
                break
            x,y = mpq.get()
            xdata.append(x)
            ydata.append(y)
            i+=1

        del xdata[:-BUFFER_SIZE]
        del ydata[:-BUFFER_SIZE]

        line.set_data(xdata,ydata)
        ax.set_xlim(min(xdata),max(xdata))
        ax.set_ylim(min(ydata),max(ydata))


    plt.title('Real-time plot') 

    _ = animation.FuncAnimation(fig, animate,interval=20)

    plt.show()

def main():
    plot_data=multiprocessing.Queue()
    plotter_proc = multiprocessing.Process(target=plot,args=(plot_data,))
    plotter_proc.start()
    import fileinput

    for line in fileinput.input():

        _ = str(line).split()
        if len(_) != 2: 
            continue #Very lenient input checking
        try:
            x=float(_[0])
            y=float(_[1])
        except ValueError:
            continue

        plot_data.put((x,y))
        sz = plot_data.qsize()
        if sz > BUFFER_SIZE:
            plot_data.get() #Popping out data - Of course, this is not exact, but good enough

if __name__ == '__main__':
    main()
